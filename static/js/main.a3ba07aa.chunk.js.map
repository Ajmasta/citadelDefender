{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/SelectCharacter.js","Components/Arena/Arena.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","MyEpicGame","abi","console","log","fetchCharacters","a","getAllDefaultCharacters","charactersTxn","map","onCharacterMint","sender","tokenId","characterIndex","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","src","alt","character","index","type","onClick","Arena","characterNFT","boss","setBoss","attackState","setAttackState","showToast","setShowToast","myEpicGame","fetchBoss","getBigBoss","bossTxn","newBossHp","newPlayerHp","bossHp","playerHp","prev","runHealAction","healCharacters","value","utils","parseEther","healTxn","runAttackAction","attackBoss","attackTxn","setTimeout","id","max","style","color","marginTop","TWITTER_HANDLE","TWITTER_LINK","App","currentAcc","setAcc","isLoading","setIsLoading","players","setPlayers","checkNetwork","networkVersion","alert","error","checkIfWalletIsConnected","request","method","accounts","length","account","connectWalletAction","fetchNFTMetadata","provider","checkIfUserHadNFT","txn","getAllPlayers","allPlayersTxn","getDamageOfPlayer","damagePlayers","player","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4g/FAAe,MAA0B,yC,sBCA5BA,EAAmB,6CAEnBC,EAAyB,SAACC,GACrC,MAAO,CACLC,KAAMD,EAAcC,KACpBC,SAAUF,EAAcE,SACxBC,GAAIH,EAAcG,GAAGC,WACrBC,MAAOL,EAAcK,MAAMD,WAC3BE,aAAcN,EAAcM,aAAaF,a,uBCM9BG,EAXU,WACvB,OACE,sBAAKC,UAAU,WAAf,UACE,wBACA,wBACA,wBACA,4BCiHSC,EAjHS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACAC,qBAAU,WACR,IAAQC,EAAaC,OAAbD,SAER,GAAIA,EAAU,CACZ,IACME,EADW,IAAIC,IAAOC,UAAUC,aAAaL,GAC3BM,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACA6B,EAAWC,IACXP,GAMFN,EAAgBD,QAEhBe,QAAQC,IAAI,+BAEb,IACHZ,qBAAU,WACR,IAAMa,EAAe,uCAAG,8BAAAC,EAAA,+EAEQlB,EAAamB,0BAFrB,OAEdC,EAFc,OAIdtB,EAAasB,EAAcC,KAAI,SAACnC,GAAD,OACnCD,EAAuBC,MAEzBa,EAAcD,GAPM,gDASpBiB,QAAQC,IAAR,MAToB,yDAAH,qDAYfM,EAAe,uCAAG,WAAOC,EAAQC,EAASC,GAAxB,SAAAP,EAAA,sDACtBH,QAAQC,IAAR,uCACkCO,EADlC,qBACqDC,EAAQlC,WAD7D,4BAC2FmC,EAAenC,aAEtGU,IACFJ,EAAgBE,EAAW2B,IAC3BV,QAAQC,IAAIlB,IANQ,2CAAH,0DAarB,OAJIE,GAAgBF,IAClBmB,IACAjB,EAAa0B,GAAG,qBAAsBJ,IAEjC,WACDtB,GACFA,EAAa2B,IAAI,qBAAsBL,MAG1C,CAACtB,EAAcF,IAElB,IAAM8B,EAAsB,uCAAG,WAAOC,GAAP,eAAAX,EAAA,yDAC7Bf,GAAoB,GADS,UAIvBH,EAJuB,wBAKzBe,QAAQC,IAAI,oCALa,SAMHhB,EAAa8B,iBAAiBD,GAN3B,cAMnBE,EANmB,gBAOnBA,EAAQC,OAPW,OAQzBjB,QAAQC,IAAI,WAAYe,GACxB5B,GAAoB,GATK,0DAY3BY,QAAQkB,KAAK,6BAAb,MACA9B,GAAoB,GAbO,0DAAH,sDAgB5B,OACE,qBAAKT,UAAU,6BAAf,SACGQ,EACC,sBAAKR,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,0DAEF,qBACEwC,IAAI,iIACJC,IAAI,iCAIR,qCACE,gEACA,qBAAKzC,UAAU,iBAAf,SACGI,EAAWuB,KAAI,SAACe,EAAWC,GAAZ,OACd,sBAAK3C,UAAU,iBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,4BAAI0C,EAAUjD,SAEhB,qBACE+C,IAAG,2CAAsCE,EAAUhD,UACnD+C,IAAKC,EAAUjD,OAEjB,wBACEmD,KAAK,SACL5C,UAAU,wBACV6C,QAAS,kBAAMX,EAAuBS,IAHxC,wBAIUD,EAAUjD,UAZeiD,EAAUjD,iB,QCkD9CqD,G,MA5ID,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aAAc7C,EAAsB,EAAtBA,gBAE7B,EAAwCC,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwBJ,mBAAS,MAAjC,mBAAO6C,EAAP,KAAaC,EAAb,KACA,EAAsC9C,mBAAS,MAA/C,mBAAO+C,EAAP,KAAoBC,EAApB,KACA,EAAkChD,oBAAS,GAA3C,mBAAOiD,EAAP,KAAkBC,EAAlB,KAEA3C,qBAAU,WACR,IAAQC,EAAaC,OAAbD,SAER,GAAIA,EAAU,CACZ,IACME,EADW,IAAIC,IAAOC,UAAUC,aAAaL,GAC3BM,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACAgE,EAAWlC,IACXP,GAGFN,EAAgBD,QAEhBe,QAAQC,IAAI,+BAEb,IACHZ,qBAAU,WACR,IAAM6C,EAAS,uCAAG,4BAAA/B,EAAA,sEACMlB,EAAakD,aADnB,OACVC,EADU,OAEhBR,EAAQ1D,EAAuBkE,IAFf,2CAAH,qDAiBXnD,IACFiD,IACAjD,EAAa0B,GAAG,kBAfI,SAAC0B,EAAWC,GAChCtC,QAAQC,IAAIoC,EAAWC,GACvB,IAAMC,EAASF,EAAU9D,WACnBiE,EAAWF,EAAY/D,WAC7ByB,QAAQC,IAAR,mCAAwCsC,EAAxC,uBAA6DC,IAE7DZ,GAAQ,SAACa,GACP,OAAO,2BAAKA,GAAZ,IAAkBnE,GAAIiE,OAExB1D,GAAgB,SAAC4D,GACf,OAAO,2BAAKA,GAAZ,IAAkBnE,GAAIkE,aAOzB,CAACvD,IACJ,IAAMyD,EAAa,uCAAG,4BAAAvC,EAAA,sEACElB,EAAa0D,eAAe,CAChDC,MAAOnD,IAAOoD,MAAMC,WAAW,WAFb,cACdC,EADc,gBAIdA,EAAQ9B,OAJM,OAKpBjB,QAAQC,IAAI,UALQ,2CAAH,qDAOb+C,EAAe,uCAAG,4BAAA7C,EAAA,sEAEpB2B,EAAe,aAFK,SAGI7C,EAAagE,aAHjB,cAGdC,EAHc,gBAIdA,EAAUjC,OAJI,OAKpBjB,QAAQC,IAAI,YAAaiD,GACzBpB,EAAe,OAEfE,GAAa,GACbmB,YAAW,WACTnB,GAAa,KACZ,KAXiB,kDAapBhC,QAAQC,IAAR,MACA6B,EAAe,IAdK,0DAAH,qDAiBrB,OACE,sBAAKnD,UAAU,kBAAf,UAEGgD,GAAQD,GACP,qBAAK0B,GAAG,QAAQzE,UAAWoD,EAAY,OAAS,GAAhD,SACE,qBAAKqB,GAAG,OAAR,gCAAsBzB,EAAKvD,KAA3B,wBAA+CsD,EAAajD,aAA5D,SAGHkD,GACC,sBAAKhD,UAAU,iBAAf,UACE,sBAAKA,UAAS,uBAAkBkD,GAAhC,UACE,+CAAQF,EAAKvD,KAAb,mBACA,sBAAKO,UAAU,gBAAf,UACE,qBAAKwC,IAAKQ,EAAKtD,SAAU+C,IAAG,eAAUO,EAAKvD,QAC3C,sBAAKO,UAAU,aAAf,UACE,0BAAUiE,MAAOjB,EAAKrD,GAAI+E,IAAK1B,EAAKnD,QACpC,sCAAOmD,EAAKrD,GAAZ,cAAoBqD,EAAKnD,MAAzB,kBAIN,qBAAKG,UAAU,mBAAf,SACE,wBAAQA,UAAU,aAAa6C,QAASwB,EAAxC,uCACgBrB,EAAKvD,UAIN,cAAhByD,GACC,sBAAKlD,UAAU,oBAAf,UACE,cAAC,EAAD,IACA,6DAMP+C,GACC,qBAAK/C,UAAU,oBAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,gDACA,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,6BAAK+C,EAAatD,OAClB,qBACE+C,IAAG,2CAAsCO,EAAarD,UACtD+C,IAAG,oBAAeM,EAAatD,QAEjC,sBAAKO,UAAU,aAAf,UACE,0BAAUiE,MAAOlB,EAAapD,GAAI+E,IAAK3B,EAAalD,QACpD,sCAAOkD,EAAapD,GAApB,cAA4BoD,EAAalD,MAAzC,eAGJ,qBAAKG,UAAU,QAAf,SACE,mEAA0B+C,EAAajD,qBAG3C,wBACEE,UAAU,aACV2E,MAAO,CAAEC,MAAO,QAASC,UAAW,QACpChC,QAASkB,EAHX,4BC9HNe,EAAiB,cACjBC,EAAY,8BAA0BD,GA+I7BE,EA7IH,WACV,MAA6B7E,mBAAS,IAAtC,mBAAO8E,EAAP,KAAmBC,EAAnB,KACA,EAAwC/E,mBAAS,MAAjD,mBAAO4C,EAAP,KAAqB7C,EAArB,KACA,EAAkCC,oBAAS,GAA3C,mBAAOgF,EAAP,KAAkBC,EAAlB,KACA,EAA8BjF,mBAAS,MAAvC,mBAAOkF,EAAP,KAAgBC,EAAhB,KACMC,EAAY,uCAAG,sBAAA/D,EAAA,sDACnB,IACyC,MAAnCZ,OAAOD,SAAS6E,gBAClBC,MAAM,6BAER,MAAOC,GACPrE,QAAQC,IAAIoE,GANK,2CAAH,qDAUZC,EAAwB,uCAAG,kCAAAnE,EAAA,oEAERZ,OAAbD,EAFqB,EAErBA,SAFqB,uBAI3B8E,MAAM,gCAJqB,iCAO3BpE,QAAQC,IAAI,SAAUX,GACtBU,QAAQC,IAAI,SAAUV,QARK,UASJD,EAASiF,QAAQ,CAAEC,OAAQ,iBATvB,QAUH,KADlBC,EATqB,QAUdC,QACLC,EAAUF,EAAS,GACzBzE,QAAQC,IAAI,+BAAgC0E,GAC5Cd,EAAOc,GACPT,KAEAlE,QAAQC,IAAI,+BAhBa,QAmB7B8D,GAAa,GAnBgB,kDAqB7B/D,QAAQC,IAAR,MArB6B,0DAAH,qDAyBxB2E,EAAmB,uCAAG,gCAAAzE,EAAA,oEAEHZ,OAAbD,EAFgB,EAEhBA,SAFgB,uBAItB8E,MAAM,iBAJgB,0CAOD9E,EAASiF,QAAQ,CACtCC,OAAQ,wBARc,OAOlBC,EAPkB,OAUxBzE,QAAQC,IAAI,YAAawE,EAAS,IAClCZ,EAAOY,EAAS,IAXQ,kDAaxBzE,QAAQC,IAAR,MAbwB,0DAAH,qDAsDzB,OAtCAZ,qBAAU,WACR,IAAMwF,EAAgB,uCAAG,sCAAA1E,EAAA,6DACvBH,QAAQC,IAAI,uBAAwB2D,GAC9BkB,EAAW,IAAIrF,IAAOC,UAAUC,aAAaJ,OAAOD,UACpDE,EAASsF,EAASlF,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACA6B,EAAWC,IACXP,GAEFQ,QAAQC,IAAI,eAAgBhB,GAC5Be,QAAQC,IAAI2D,GAVW,SAWL3E,EAAa8F,oBAXR,cAWjBC,EAXiB,iBAYK/F,EAAagG,gBAZlB,eAYjBC,EAZiB,OAavBjB,EAAWiB,GAbY,UAcKjG,EAAakG,kBACvCD,EAAc,IAfO,QAcjBE,EAdiB,OAiBvBpF,QAAQC,IAAI,gBAAiBmF,EAAc7G,YACvCyG,EAAI5G,MACN4B,QAAQC,IAAI,0BACZpB,EAAgBX,EAAuB8G,KAEvChF,QAAQC,IAAI,4BAEd8D,GAAa,GAxBU,4CAAH,qDA0BlBH,IACF5D,QAAQC,IAAI,kBAAmB2D,GAC/BiB,OAED,CAACjB,IAEJvE,qBAAU,WACR0E,GAAa,GAEbO,MACC,IAED,qBAAK3F,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,wDACA,mBAAGA,UAAU,WAAb,6CAEA,qBAAKA,UAAU,6BACdiF,EACAE,EACC,cAAC,EAAD,IACGF,EAOAlC,EAGH,cAAC,EAAD,CACEA,aAAcA,EACd7C,gBAAiBA,IAJnB,cAAC,EAAD,CAAiBA,gBAAiBA,IAPlC,wBACEF,UAAU,mCACV6C,QAASoD,EAFX,yBAeJ,gCACE,oBAAItB,MAAO,CAAEC,MAAO,SAApB,iCADF,OAEGS,QAFH,IAEGA,OAFH,EAEGA,EAAS1D,KAAI,SAAC+E,GAAD,OACZ,mBAAG/B,MAAO,CAAEC,MAAO,SAAnB,SAA+B8B,UAGnC,sBAAK1G,UAAU,mBAAf,UACE,qBAAKyC,IAAI,eAAezC,UAAU,eAAewC,IAAKmE,IACtD,mBACE3G,UAAU,cACV4G,KAAM7B,EACN8B,OAAO,SACPC,IAAI,aAJN,+BAKiBhC,cC9I3BiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a3ba07aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","export const CONTRACT_ADDRESS = \"0xbfeDe05fC4A8058e5F45C7c870651B90d9f26134\";\r\n\r\nexport const transformCharacterData = (characterData) => {\r\n  return {\r\n    name: characterData.name,\r\n    imageURI: characterData.imageURI,\r\n    hp: characterData.hp.toNumber(),\r\n    maxHp: characterData.maxHp.toNumber(),\r\n    attackDamage: characterData.attackDamage.toNumber(),\r\n  };\r\n};\r\n","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SelectCharacter.css\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport MyEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n/*\r\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\r\n */\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [mintingCharacter, setMintingCharacter] = useState(false);\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      /*\r\n       * This is the big difference. Set our gameContract in state.\r\n       */\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const fetchCharacters = async () => {\r\n      try {\r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n\r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n      if (gameContract) {\r\n        setCharacterNFT(characters[characterIndex]);\r\n        console.log(characters);\r\n      }\r\n    };\r\n    if (gameContract && characters) {\r\n      fetchCharacters();\r\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n    }\r\n    return () => {\r\n      if (gameContract) {\r\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\r\n      }\r\n    };\r\n  }, [gameContract, characters]);\r\n\r\n  const mintCharacterNFTAction = async (characterId) => {\r\n    setMintingCharacter(true);\r\n\r\n    try {\r\n      if (gameContract) {\r\n        console.log(\"Minting character in progress...\");\r\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log(\"mintTxn:\", mintTxn);\r\n        setMintingCharacter(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"MintCharacterAction Error:\", error);\r\n      setMintingCharacter(false);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"select-character-container\">\r\n      {mintingCharacter ? (\r\n        <div className=\"loading\">\r\n          <div className=\"indicator\">\r\n            <LoadingIndicator />\r\n            <p>Minting In Progress...</p>\r\n          </div>\r\n          <img\r\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n            alt=\"Minting loading indicator\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2>Mint Your Hero. Choose wisely.</h2>\r\n          <div className=\"character-grid\">\r\n            {characters.map((character, index) => (\r\n              <div className=\"character-item\" key={character.name}>\r\n                <div className=\"name-container\">\r\n                  <p>{character.name}</p>\r\n                </div>\r\n                <img\r\n                  src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`}\r\n                  alt={character.name}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"character-mint-button\"\r\n                  onClick={() => mintCharacterNFTAction(index)}\r\n                >{`Mint ${character.name}`}</button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectCharacter;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport \"./Arena.css\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can show a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // State\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [boss, setBoss] = useState(null);\r\n  const [attackState, setAttackState] = useState(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const fetchBoss = async () => {\r\n      const bossTxn = await gameContract.getBigBoss();\r\n      setBoss(transformCharacterData(bossTxn));\r\n    };\r\n    const AttackEmitted = (newBossHp, newPlayerHp) => {\r\n      console.log(newBossHp, newPlayerHp);\r\n      const bossHp = newBossHp.toNumber();\r\n      const playerHp = newPlayerHp.toNumber();\r\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n      setBoss((prev) => {\r\n        return { ...prev, hp: bossHp };\r\n      });\r\n      setCharacterNFT((prev) => {\r\n        return { ...prev, hp: playerHp };\r\n      });\r\n    };\r\n    if (gameContract) {\r\n      fetchBoss();\r\n      gameContract.on(\"AttackComplete\", AttackEmitted);\r\n    }\r\n  }, [gameContract]);\r\n  const runHealAction = async () => {\r\n    const healTxn = await gameContract.healCharacters({\r\n      value: ethers.utils.parseEther(\"0.001\"),\r\n    });\r\n    await healTxn.wait();\r\n    console.log(\"healed\");\r\n  };\r\n  const runAttackAction = async () => {\r\n    try {\r\n      setAttackState(\"attacking\");\r\n      const attackTxn = await gameContract.attackBoss();\r\n      await attackTxn.wait();\r\n      console.log(\"AttackTxn\", attackTxn);\r\n      setAttackState(\"hit\");\r\n\r\n      setShowToast(true);\r\n      setTimeout(() => {\r\n        setShowToast(false);\r\n      }, 5000);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setAttackState(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"arena-container\">\r\n      {/* Add your toast HTML right here */}\r\n      {boss && characterNFT && (\r\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\r\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n        </div>\r\n      )}\r\n      {boss && (\r\n        <div className=\"boss-container\">\r\n          <div className={`boss-content ${attackState}`}>\r\n            <h2>🔥 {boss.name} 🔥</h2>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n              <div className=\"health-bar\">\r\n                <progress value={boss.hp} max={boss.maxHp} />\r\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"attack-container\">\r\n            <button className=\"cta-button\" onClick={runAttackAction}>\r\n              {`💥 Attack ${boss.name}`}\r\n            </button>\r\n          </div>\r\n          {/* Add this right under your attack button */}\r\n          {attackState === \"attacking\" && (\r\n            <div className=\"loading-indicator\">\r\n              <LoadingIndicator />\r\n              <p>Attacking ⚔️</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {/* Replace your Character UI with this */}\r\n      {characterNFT && (\r\n        <div className=\"players-container\">\r\n          <div className=\"player-container\">\r\n            <h2>Your Character</h2>\r\n            <div className=\"player\">\r\n              <div className=\"image-content\">\r\n                <h2>{characterNFT.name}</h2>\r\n                <img\r\n                  src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\r\n                  alt={`Character ${characterNFT.name}`}\r\n                />\r\n                <div className=\"health-bar\">\r\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"stats\">\r\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n              </div>\r\n            </div>\r\n            <button\r\n              className=\"cta-button\"\r\n              style={{ color: \"black\", marginTop: \"10px\" }}\r\n              onClick={runHealAction}\r\n            >\r\n              Heal\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arena;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport SelectCharacter from \"./Components/SelectCharacter/SelectCharacter\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\r\nimport MyEpicGame from \"./utils/MyEpicGame.json\";\r\nimport { ethers } from \"ethers\";\r\nimport Arena from \"./Components/Arena/Arena\";\r\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\r\n\r\nconst TWITTER_HANDLE = \"_buildspace\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  const [currentAcc, setAcc] = useState(\"\");\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [players, setPlayers] = useState(null);\r\n  const checkNetwork = async () => {\r\n    try {\r\n      if (window.ethereum.networkVersion !== \"4\") {\r\n        alert(\"Please connect to Rinkeby\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Make sure you have Metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"object\", ethereum);\r\n        console.log(\"window\", window);\r\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n        if (accounts.length !== 0) {\r\n          const account = accounts[0];\r\n          console.log(\"Found an authorized account:\", account);\r\n          setAcc(account);\r\n          checkNetwork();\r\n        } else {\r\n          console.log(\"No authorized account Found\");\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get Metamask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      console.log(\"connected\", accounts[0]);\r\n      setAcc(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const fetchNFTMetadata = async () => {\r\n      console.log(\"Checking for NFT on \", currentAcc);\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicGame.abi,\r\n        signer\r\n      );\r\n      console.log(\"gameContract\", gameContract);\r\n      console.log(currentAcc);\r\n      const txn = await gameContract.checkIfUserHadNFT();\r\n      const allPlayersTxn = await gameContract.getAllPlayers();\r\n      setPlayers(allPlayersTxn);\r\n      const damagePlayers = await gameContract.getDamageOfPlayer(\r\n        allPlayersTxn[0]\r\n      );\r\n      console.log(\"damagePlayers\", damagePlayers.toNumber());\r\n      if (txn.name) {\r\n        console.log(\"User has Character NFT\");\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log(\"No Character NFT found. \");\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    if (currentAcc) {\r\n      console.log(\"CurrentAccount:\", currentAcc);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAcc]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚔️ Citadel Defender ⚔️</p>\r\n          <p className=\"sub-text\">Team up to protect the Citadel!</p>\r\n\r\n          <div className=\"connect-wallet-container\"></div>\r\n          {currentAcc}\r\n          {isLoading ? (\r\n            <LoadingIndicator />\r\n          ) : !currentAcc ? (\r\n            <button\r\n              className=\"cta-button connect-wallet-button\"\r\n              onClick={connectWalletAction}\r\n            >\r\n              Connect!\r\n            </button>\r\n          ) : !characterNFT ? (\r\n            <SelectCharacter setCharacterNFT={setCharacterNFT} />\r\n          ) : (\r\n            <Arena\r\n              characterNFT={characterNFT}\r\n              setCharacterNFT={setCharacterNFT}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          <h3 style={{ color: \"white\" }}>List of All Players</h3>\r\n          {players?.map((player) => (\r\n            <p style={{ color: \"white\" }}>{player}</p>\r\n          ))}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}